/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '@ngrx/store-log-monitor/src/log-monitor/log-monitor';
import * as import1 from '@angular/core/src/change_detection/change_detection_util';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/metadata/view';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/change_detection/constants';
import * as import8 from '@angular/core/src/linker/component_factory';
import * as import9 from '@ngrx/store-devtools/src/devtools';
import * as import10 from '@ngrx/store-log-monitor/src/log-monitor/log-monitor-entry';
import * as import11 from './log-monitor-entry.ngfactory';
import * as import12 from '@angular/core/src/linker/view_container';
import * as import13 from '@ngrx/store-log-monitor/src/log-monitor/log-monitor-button';
import * as import14 from './log-monitor-button.ngfactory';
import * as import15 from '../../../../@angular/common/src/directives/ng_for.ngfactory';
import * as import16 from '@angular/common/src/pipes/async_pipe';
import * as import17 from '@angular/core/src/linker/template_ref';
import * as import18 from '@angular/core/src/change_detection/differs/iterable_differs';
import * as import19 from '@angular/common/src/directives/ng_for';
export class Wrapper_LogMonitorComponent {
  /*private*/ _eventHandler:Function;
  context:import0.LogMonitorComponent;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  constructor(p0:any) {
    this._changed = false;
    this.context = new import0.LogMonitorComponent(p0);
    this._expr_0 = import1.UNINITIALIZED;
  }
  ngOnDetach(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  check_expandEntries(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.expandEntries = currValue;
      this._expr_0 = currValue;
    }
  }
  ngDoCheck(view:import2.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import2.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
var renderType_LogMonitorComponent_Host:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,([] as any[]),{});
class View_LogMonitorComponent_Host0 extends import2.AppView<any> {
  _el_0:any;
  compView_0:import2.AppView<import0.LogMonitorComponent>;
  _LogMonitorComponent_0_3:Wrapper_LogMonitorComponent;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_LogMonitorComponent_Host0,renderType_LogMonitorComponent_Host,import6.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'log-monitor',import3.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this.compView_0 = new View_LogMonitorComponent0(this.viewUtils,this,0,this._el_0);
    this._LogMonitorComponent_0_3 = new Wrapper_LogMonitorComponent(this.injectorGet(import9.StoreDevtools,this.parentIndex));
    this.compView_0.create(this._LogMonitorComponent_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import8.ComponentRef_<any>(0,this,this._el_0,this._LogMonitorComponent_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.LogMonitorComponent) && (0 === requestNodeIndex))) { return this._LogMonitorComponent_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._LogMonitorComponent_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
export const LogMonitorComponentNgFactory:import8.ComponentFactory<import0.LogMonitorComponent> = new import8.ComponentFactory<import0.LogMonitorComponent>('log-monitor',View_LogMonitorComponent_Host0,import0.LogMonitorComponent);
const styles_LogMonitorComponent:any[] = ['[_nghost-%COMP%] {\n      display: block;\n      background-color: #2A2F3A;\n      font-family: \'monaco\', \'Consolas\', \'Lucida Console\', monospace;\n      position: relative;\n      overflow-y: hidden;\n      width: 100%;\n      height: 100%;\n      min-width: 300px;\n      direction: ltr;\n    }\n\n    .button-bar[_ngcontent-%COMP%] {\n      text-align: center;\n      border-bottom-width: 1px;\n      border-bottom-style: solid;\n      border-color: transparent;\n      z-index: 1;\n      display: flex;\n      flex-direction: row;\n      padding: 0 4px;\n    }\n\n    .elements[_ngcontent-%COMP%] {\n      position: absolute;\n      left: 0;\n      right: 0;\n      top: 38px;\n      bottom: 0;\n      overflow-x: hidden;\n      overflow-y: auto;\n    }'];
class View_LogMonitorComponent1 extends import2.AppView<any> {
  _el_0:any;
  compView_0:import2.AppView<import10.LogMonitorEntryComponent>;
  _LogMonitorEntryComponent_0_3:import11.Wrapper_LogMonitorEntryComponent;
  _text_1:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any,declaredViewContainer:import12.ViewContainer) {
    super(View_LogMonitorComponent1,renderType_LogMonitorComponent,import6.ViewType.EMBEDDED,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways,declaredViewContainer);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._el_0 = import3.createRenderElement(this.renderer,(null as any),'log-monitor-entry',import3.EMPTY_INLINE_ARRAY,(null as any));
    this.compView_0 = new import11.View_LogMonitorEntryComponent0(this.viewUtils,this,0,this._el_0);
    this._LogMonitorEntryComponent_0_3 = new import11.Wrapper_LogMonitorEntryComponent();
    this._text_1 = this.renderer.createText((null as any),'\n      ',(null as any));
    this.compView_0.create(this._LogMonitorEntryComponent_0_3.context);
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_0,new import3.InlineArray2(2,'toggle',(null as any)),this.eventHandler(this.handleEvent_0));
    this._LogMonitorEntryComponent_0_3.subscribe(this,this.eventHandler(this.handleEvent_0),true);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._text_1
    ]
    ),[disposable_0]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import10.LogMonitorEntryComponent) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 1)))) { return this._LogMonitorEntryComponent_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_0_0_0:any = this.parentView.context.expandEntries;
    this._LogMonitorEntryComponent_0_3.check_expandEntries(currVal_0_0_0,throwOnChange,false);
    const currVal_0_0_1:any = (this.context.index === 0);
    this._LogMonitorEntryComponent_0_3.check_disabled(currVal_0_0_1,throwOnChange,false);
    const currVal_0_0_2:any = this.context.$implicit;
    this._LogMonitorEntryComponent_0_3.check_item(currVal_0_0_2,throwOnChange,false);
    this._LogMonitorEntryComponent_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
    this._LogMonitorEntryComponent_0_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  handleEvent_0(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'toggle')) {
      const pd_sub_0:any = ((<any>this.parentView.context.handleToggle($event.id)) !== false);
      result = (pd_sub_0 && result);
    }
    return result;
  }
}
var renderType_LogMonitorComponent:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.Emulated,styles_LogMonitorComponent,{});
export class View_LogMonitorComponent0 extends import2.AppView<import0.LogMonitorComponent> {
  _text_0:any;
  _el_1:any;
  _text_2:any;
  _el_3:any;
  compView_3:import2.AppView<import13.LogMonitorButtonComponent>;
  _LogMonitorButtonComponent_3_3:import14.Wrapper_LogMonitorButtonComponent;
  _text_4:any;
  _text_5:any;
  _el_6:any;
  compView_6:import2.AppView<import13.LogMonitorButtonComponent>;
  _LogMonitorButtonComponent_6_3:import14.Wrapper_LogMonitorButtonComponent;
  _text_7:any;
  _text_8:any;
  _el_9:any;
  compView_9:import2.AppView<import13.LogMonitorButtonComponent>;
  _LogMonitorButtonComponent_9_3:import14.Wrapper_LogMonitorButtonComponent;
  _text_10:any;
  _text_11:any;
  _el_12:any;
  compView_12:import2.AppView<import13.LogMonitorButtonComponent>;
  _LogMonitorButtonComponent_12_3:import14.Wrapper_LogMonitorButtonComponent;
  _text_13:any;
  _text_14:any;
  _text_15:any;
  _el_16:any;
  _text_17:any;
  _anchor_18:any;
  /*private*/ _vc_18:import12.ViewContainer;
  _TemplateRef_18_5:any;
  _NgFor_18_6:import15.Wrapper_NgFor;
  _text_19:any;
  _text_20:any;
  _pipe_async_0:import16.AsyncPipe;
  _pipe_async_1:import16.AsyncPipe;
  _pipe_async_2:import16.AsyncPipe;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_LogMonitorComponent0,renderType_LogMonitorComponent,import6.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._text_0 = this.renderer.createText(parentRenderNode,'\n    ',(null as any));
    this._el_1 = import3.createRenderElement(this.renderer,parentRenderNode,'div',new import3.InlineArray2(2,'class','button-bar'),(null as any));
    this._text_2 = this.renderer.createText(this._el_1,'\n      ',(null as any));
    this._el_3 = import3.createRenderElement(this.renderer,this._el_1,'log-monitor-button',import3.EMPTY_INLINE_ARRAY,(null as any));
    this.compView_3 = new import14.View_LogMonitorButtonComponent0(this.viewUtils,this,3,this._el_3);
    this._LogMonitorButtonComponent_3_3 = new import14.Wrapper_LogMonitorButtonComponent();
    this._text_4 = this.renderer.createText((null as any),'\n        Reset\n      ',(null as any));
    this.compView_3.create(this._LogMonitorButtonComponent_3_3.context);
    this._text_5 = this.renderer.createText(this._el_1,'\n\n      ',(null as any));
    this._el_6 = import3.createRenderElement(this.renderer,this._el_1,'log-monitor-button',import3.EMPTY_INLINE_ARRAY,(null as any));
    this.compView_6 = new import14.View_LogMonitorButtonComponent0(this.viewUtils,this,6,this._el_6);
    this._LogMonitorButtonComponent_6_3 = new import14.Wrapper_LogMonitorButtonComponent();
    this._text_7 = this.renderer.createText((null as any),'\n        Revert\n      ',(null as any));
    this.compView_6.create(this._LogMonitorButtonComponent_6_3.context);
    this._text_8 = this.renderer.createText(this._el_1,'\n\n      ',(null as any));
    this._el_9 = import3.createRenderElement(this.renderer,this._el_1,'log-monitor-button',import3.EMPTY_INLINE_ARRAY,(null as any));
    this.compView_9 = new import14.View_LogMonitorButtonComponent0(this.viewUtils,this,9,this._el_9);
    this._LogMonitorButtonComponent_9_3 = new import14.Wrapper_LogMonitorButtonComponent();
    this._text_10 = this.renderer.createText((null as any),'\n        Sweep\n      ',(null as any));
    this.compView_9.create(this._LogMonitorButtonComponent_9_3.context);
    this._text_11 = this.renderer.createText(this._el_1,'\n\n      ',(null as any));
    this._el_12 = import3.createRenderElement(this.renderer,this._el_1,'log-monitor-button',import3.EMPTY_INLINE_ARRAY,(null as any));
    this.compView_12 = new import14.View_LogMonitorButtonComponent0(this.viewUtils,this,12,this._el_12);
    this._LogMonitorButtonComponent_12_3 = new import14.Wrapper_LogMonitorButtonComponent();
    this._text_13 = this.renderer.createText((null as any),'\n        Commit\n      ',(null as any));
    this.compView_12.create(this._LogMonitorButtonComponent_12_3.context);
    this._text_14 = this.renderer.createText(this._el_1,'\n    ',(null as any));
    this._text_15 = this.renderer.createText(parentRenderNode,'\n    ',(null as any));
    this._el_16 = import3.createRenderElement(this.renderer,parentRenderNode,'div',new import3.InlineArray2(2,'class','elements'),(null as any));
    this._text_17 = this.renderer.createText(this._el_16,'\n      ',(null as any));
    this._anchor_18 = this.renderer.createTemplateAnchor(this._el_16,(null as any));
    this._vc_18 = new import12.ViewContainer(18,16,this,this._anchor_18);
    this._TemplateRef_18_5 = new import17.TemplateRef_(this,18,this._anchor_18);
    this._NgFor_18_6 = new import15.Wrapper_NgFor(this._vc_18.vcRef,this._TemplateRef_18_5,this.parentView.injectorGet(import18.IterableDiffers,this.parentIndex),this.ref);
    this._text_19 = this.renderer.createText(this._el_16,'\n    ',(null as any));
    this._text_20 = this.renderer.createText(parentRenderNode,'\n  ',(null as any));
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_3,new import3.InlineArray4(4,'action',(null as any),'click',(null as any)),this.eventHandler(this.handleEvent_3));
    this._LogMonitorButtonComponent_3_3.subscribe(this,this.eventHandler(this.handleEvent_3),true);
    var disposable_1:Function = import3.subscribeToRenderElement(this,this._el_6,new import3.InlineArray4(4,'action',(null as any),'click',(null as any)),this.eventHandler(this.handleEvent_6));
    this._LogMonitorButtonComponent_6_3.subscribe(this,this.eventHandler(this.handleEvent_6),true);
    var disposable_2:Function = import3.subscribeToRenderElement(this,this._el_9,new import3.InlineArray4(4,'action',(null as any),'click',(null as any)),this.eventHandler(this.handleEvent_9));
    this._LogMonitorButtonComponent_9_3.subscribe(this,this.eventHandler(this.handleEvent_9),true);
    this._pipe_async_0 = new import16.AsyncPipe(this.ref);
    var disposable_3:Function = import3.subscribeToRenderElement(this,this._el_12,new import3.InlineArray4(4,'action',(null as any),'click',(null as any)),this.eventHandler(this.handleEvent_12));
    this._LogMonitorButtonComponent_12_3.subscribe(this,this.eventHandler(this.handleEvent_12),true);
    this._pipe_async_1 = new import16.AsyncPipe(this.ref);
    this._pipe_async_2 = new import16.AsyncPipe(this.ref);
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._text_0,
      this._el_1,
      this._text_2,
      this._el_3,
      this._text_4,
      this._text_5,
      this._el_6,
      this._text_7,
      this._text_8,
      this._el_9,
      this._text_10,
      this._text_11,
      this._el_12,
      this._text_13,
      this._text_14,
      this._text_15,
      this._el_16,
      this._text_17,
      this._anchor_18,
      this._text_19,
      this._text_20
    ]
    ),[
      disposable_0,
      disposable_1,
      disposable_2,
      disposable_3
    ]
    );
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import13.LogMonitorButtonComponent) && ((3 <= requestNodeIndex) && (requestNodeIndex <= 4)))) { return this._LogMonitorButtonComponent_3_3.context; }
    if (((token === import13.LogMonitorButtonComponent) && ((6 <= requestNodeIndex) && (requestNodeIndex <= 7)))) { return this._LogMonitorButtonComponent_6_3.context; }
    if (((token === import13.LogMonitorButtonComponent) && ((9 <= requestNodeIndex) && (requestNodeIndex <= 10)))) { return this._LogMonitorButtonComponent_9_3.context; }
    if (((token === import13.LogMonitorButtonComponent) && ((12 <= requestNodeIndex) && (requestNodeIndex <= 13)))) { return this._LogMonitorButtonComponent_12_3.context; }
    if (((token === import17.TemplateRef) && (18 === requestNodeIndex))) { return this._TemplateRef_18_5; }
    if (((token === import19.NgFor) && (18 === requestNodeIndex))) { return this._NgFor_18_6.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const valUnwrapper:any = new import1.ValueUnwrapper();
    this._LogMonitorButtonComponent_3_3.ngDoCheck(this,this._el_3,throwOnChange);
    this._LogMonitorButtonComponent_6_3.ngDoCheck(this,this._el_6,throwOnChange);
    valUnwrapper.reset();
    const currVal_9_0_0:any = valUnwrapper.unwrap(this._pipe_async_0.transform(this.context.canSweep$));
    this._LogMonitorButtonComponent_9_3.check_disabled(currVal_9_0_0,throwOnChange,valUnwrapper.hasWrappedValue);
    this._LogMonitorButtonComponent_9_3.ngDoCheck(this,this._el_9,throwOnChange);
    valUnwrapper.reset();
    const currVal_12_0_0:any = valUnwrapper.unwrap(this._pipe_async_1.transform(this.context.canCommit$));
    this._LogMonitorButtonComponent_12_3.check_disabled(currVal_12_0_0,throwOnChange,valUnwrapper.hasWrappedValue);
    this._LogMonitorButtonComponent_12_3.ngDoCheck(this,this._el_12,throwOnChange);
    valUnwrapper.reset();
    const currVal_18_0_0:any = valUnwrapper.unwrap(this._pipe_async_2.transform(this.context.items$));
    this._NgFor_18_6.check_ngForOf(currVal_18_0_0,throwOnChange,valUnwrapper.hasWrappedValue);
    this._NgFor_18_6.ngDoCheck(this,this._anchor_18,throwOnChange);
    this._vc_18.detectChangesInNestedViews(throwOnChange);
    this._LogMonitorButtonComponent_3_3.checkHost(this,this.compView_3,this._el_3,throwOnChange);
    this._LogMonitorButtonComponent_6_3.checkHost(this,this.compView_6,this._el_6,throwOnChange);
    this._LogMonitorButtonComponent_9_3.checkHost(this,this.compView_9,this._el_9,throwOnChange);
    this._LogMonitorButtonComponent_12_3.checkHost(this,this.compView_12,this._el_12,throwOnChange);
    this.compView_3.internalDetectChanges(throwOnChange);
    this.compView_6.internalDetectChanges(throwOnChange);
    this.compView_9.internalDetectChanges(throwOnChange);
    this.compView_12.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this._vc_18.destroyNestedViews();
    this.compView_3.destroy();
    this.compView_6.destroy();
    this.compView_9.destroy();
    this.compView_12.destroy();
    this._LogMonitorButtonComponent_3_3.ngOnDestroy();
    this._LogMonitorButtonComponent_6_3.ngOnDestroy();
    this._LogMonitorButtonComponent_9_3.ngOnDestroy();
    this._LogMonitorButtonComponent_12_3.ngOnDestroy();
    this._pipe_async_0.ngOnDestroy();
    this._pipe_async_1.ngOnDestroy();
    this._pipe_async_2.ngOnDestroy();
  }
  visitProjectableNodesInternal(nodeIndex:number,ngContentIndex:number,cb:any,ctx:any):void {
    if (((nodeIndex == 3) && (ngContentIndex == 0))) { cb(this._text_4,ctx); }
    if (((nodeIndex == 6) && (ngContentIndex == 0))) { cb(this._text_7,ctx); }
    if (((nodeIndex == 9) && (ngContentIndex == 0))) { cb(this._text_10,ctx); }
    if (((nodeIndex == 12) && (ngContentIndex == 0))) { cb(this._text_13,ctx); }
  }
  createEmbeddedViewInternal(nodeIndex:number):import2.AppView<any> {
    if ((nodeIndex == 18)) { return new View_LogMonitorComponent1(this.viewUtils,this,18,this._anchor_18,this._vc_18); }
    return (null as any);
  }
  handleEvent_3(eventName:string,$event:any):boolean {
    this.compView_3.markPathToRootAsCheckOnce();
    var result:boolean = true;
    result = (this._LogMonitorButtonComponent_3_3.handleEvent(eventName,$event) && result);
    if ((eventName == 'action')) {
      const pd_sub_0:any = ((<any>this.context.handleReset()) !== false);
      result = (pd_sub_0 && result);
    }
    return result;
  }
  handleEvent_6(eventName:string,$event:any):boolean {
    this.compView_6.markPathToRootAsCheckOnce();
    var result:boolean = true;
    result = (this._LogMonitorButtonComponent_6_3.handleEvent(eventName,$event) && result);
    if ((eventName == 'action')) {
      const pd_sub_0:any = ((<any>this.context.handleRollback()) !== false);
      result = (pd_sub_0 && result);
    }
    return result;
  }
  handleEvent_9(eventName:string,$event:any):boolean {
    this.compView_9.markPathToRootAsCheckOnce();
    var result:boolean = true;
    result = (this._LogMonitorButtonComponent_9_3.handleEvent(eventName,$event) && result);
    if ((eventName == 'action')) {
      const pd_sub_0:any = ((<any>this.context.handleSweep()) !== false);
      result = (pd_sub_0 && result);
    }
    return result;
  }
  handleEvent_12(eventName:string,$event:any):boolean {
    this.compView_12.markPathToRootAsCheckOnce();
    var result:boolean = true;
    result = (this._LogMonitorButtonComponent_12_3.handleEvent(eventName,$event) && result);
    if ((eventName == 'action')) {
      const pd_sub_0:any = ((<any>this.context.handleCommit()) !== false);
      result = (pd_sub_0 && result);
    }
    return result;
  }
}