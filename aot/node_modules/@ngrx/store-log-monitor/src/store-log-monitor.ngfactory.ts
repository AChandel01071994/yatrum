/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '@ngrx/store-log-monitor/src/store-log-monitor';
import * as import1 from '@angular/core/src/change_detection/change_detection_util';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/metadata/view';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/change_detection/constants';
import * as import8 from '@angular/core/src/linker/component_factory';
import * as import9 from '@ngrx/store-log-monitor/src/dock-monitor/dock-monitor';
import * as import10 from './dock-monitor/dock-monitor.ngfactory';
import * as import11 from '@ngrx/store-log-monitor/src/log-monitor/log-monitor';
import * as import12 from './log-monitor/log-monitor.ngfactory';
import * as import13 from '@ngrx/store-devtools/src/devtools';
import * as import14 from '@ngrx/store-log-monitor/src/dock-monitor/actions';
export class Wrapper_StoreLogMonitorComponent {
  /*private*/ _eventHandler:Function;
  context:import0.StoreLogMonitorComponent;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  constructor() {
    this._changed = false;
    this.context = new import0.StoreLogMonitorComponent();
    this._expr_0 = import1.UNINITIALIZED;
    this._expr_1 = import1.UNINITIALIZED;
    this._expr_2 = import1.UNINITIALIZED;
  }
  ngOnDetach(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  check_toggleCommand(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.toggleCommand = currValue;
      this._expr_0 = currValue;
    }
  }
  check_positionCommand(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.positionCommand = currValue;
      this._expr_1 = currValue;
    }
  }
  check_expandEntries(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_2,currValue))) {
      this._changed = true;
      this.context.expandEntries = currValue;
      this._expr_2 = currValue;
    }
  }
  ngDoCheck(view:import2.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import2.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
var renderType_StoreLogMonitorComponent_Host:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,([] as any[]),{});
class View_StoreLogMonitorComponent_Host0 extends import2.AppView<any> {
  _el_0:any;
  compView_0:import2.AppView<import0.StoreLogMonitorComponent>;
  _StoreLogMonitorComponent_0_3:Wrapper_StoreLogMonitorComponent;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_StoreLogMonitorComponent_Host0,renderType_StoreLogMonitorComponent_Host,import6.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'ngrx-store-log-monitor',import3.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this.compView_0 = new View_StoreLogMonitorComponent0(this.viewUtils,this,0,this._el_0);
    this._StoreLogMonitorComponent_0_3 = new Wrapper_StoreLogMonitorComponent();
    this.compView_0.create(this._StoreLogMonitorComponent_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import8.ComponentRef_<any>(0,this,this._el_0,this._StoreLogMonitorComponent_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.StoreLogMonitorComponent) && (0 === requestNodeIndex))) { return this._StoreLogMonitorComponent_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._StoreLogMonitorComponent_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
export const StoreLogMonitorComponentNgFactory:import8.ComponentFactory<import0.StoreLogMonitorComponent> = new import8.ComponentFactory<import0.StoreLogMonitorComponent>('ngrx-store-log-monitor',View_StoreLogMonitorComponent_Host0,import0.StoreLogMonitorComponent);
const styles_StoreLogMonitorComponent:any[] = ([] as any[]);
var renderType_StoreLogMonitorComponent:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,styles_StoreLogMonitorComponent,{});
export class View_StoreLogMonitorComponent0 extends import2.AppView<import0.StoreLogMonitorComponent> {
  _text_0:any;
  _el_1:any;
  compView_1:import2.AppView<import9.DockMonitorComponent>;
  _DockMonitorComponent_1_3:import10.Wrapper_DockMonitorComponent;
  _text_2:any;
  _el_3:any;
  compView_3:import2.AppView<import11.LogMonitorComponent>;
  _LogMonitorComponent_3_3:import12.Wrapper_LogMonitorComponent;
  _text_4:any;
  _text_5:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_StoreLogMonitorComponent0,renderType_StoreLogMonitorComponent,import6.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._text_0 = this.renderer.createText(parentRenderNode,'\n    ',(null as any));
    this._el_1 = import3.createRenderElement(this.renderer,parentRenderNode,'dock-monitor',import3.EMPTY_INLINE_ARRAY,(null as any));
    this.compView_1 = new import10.View_DockMonitorComponent0(this.viewUtils,this,1,this._el_1);
    this._DockMonitorComponent_1_3 = new import10.Wrapper_DockMonitorComponent(this.parentView.injectorGet(import13.StoreDevtools,this.parentIndex),this.parentView.injectorGet(import14.DockActions,this.parentIndex));
    this._text_2 = this.renderer.createText((null as any),'\n      ',(null as any));
    this._el_3 = import3.createRenderElement(this.renderer,(null as any),'log-monitor',import3.EMPTY_INLINE_ARRAY,(null as any));
    this.compView_3 = new import12.View_LogMonitorComponent0(this.viewUtils,this,3,this._el_3);
    this._LogMonitorComponent_3_3 = new import12.Wrapper_LogMonitorComponent(this.parentView.injectorGet(import13.StoreDevtools,this.parentIndex));
    this.compView_3.create(this._LogMonitorComponent_3_3.context);
    this._text_4 = this.renderer.createText((null as any),'\n    ',(null as any));
    this.compView_1.create(this._DockMonitorComponent_1_3.context);
    this._text_5 = this.renderer.createText(parentRenderNode,'\n  ',(null as any));
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._text_0,
      this._el_1,
      this._text_2,
      this._el_3,
      this._text_4,
      this._text_5
    ]
    ),(null as any));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import11.LogMonitorComponent) && (3 === requestNodeIndex))) { return this._LogMonitorComponent_3_3.context; }
    if (((token === import9.DockMonitorComponent) && ((1 <= requestNodeIndex) && (requestNodeIndex <= 4)))) { return this._DockMonitorComponent_1_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_1_0_0:any = this.context.toggleCommand;
    this._DockMonitorComponent_1_3.check_toggleCommand(currVal_1_0_0,throwOnChange,false);
    const currVal_1_0_1:any = this.context.positionCommand;
    this._DockMonitorComponent_1_3.check_positionCommand(currVal_1_0_1,throwOnChange,false);
    if (this._DockMonitorComponent_1_3.ngDoCheck(this,this._el_1,throwOnChange)) { this.compView_1.markAsCheckOnce(); }
    const currVal_3_0_0:any = this.context.expandEntries;
    this._LogMonitorComponent_3_3.check_expandEntries(currVal_3_0_0,throwOnChange,false);
    this._LogMonitorComponent_3_3.ngDoCheck(this,this._el_3,throwOnChange);
    this.compView_1.internalDetectChanges(throwOnChange);
    this.compView_3.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_1.destroy();
    this.compView_3.destroy();
    this._DockMonitorComponent_1_3.ngOnDestroy();
  }
  visitProjectableNodesInternal(nodeIndex:number,ngContentIndex:number,cb:any,ctx:any):void {
    if (((nodeIndex == 1) && (ngContentIndex == 0))) {
      cb(this._text_2,ctx);
      cb(this._el_3,ctx);
      cb(this._text_4,ctx);
    }
  }
}