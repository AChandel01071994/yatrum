/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '@ngrx/store-log-monitor/src/dock-monitor/dock-monitor';
import * as import1 from '@angular/core/src/change_detection/change_detection_util';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/metadata/view';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/change_detection/constants';
import * as import8 from '@angular/core/src/linker/component_factory';
import * as import9 from '@ngrx/store-devtools/src/devtools';
import * as import10 from '@ngrx/store-log-monitor/src/dock-monitor/actions';
import * as import11 from '@ngrx/store-log-monitor/src/dock-monitor/commander';
import * as import12 from './commander.ngfactory';
import * as import13 from '@ngrx/store-log-monitor/src/dock-monitor/dock';
import * as import14 from './dock.ngfactory';
import * as import15 from '@angular/common/src/pipes/async_pipe';
export class Wrapper_DockMonitorComponent {
  /*private*/ _eventHandler:Function;
  context:import0.DockMonitorComponent;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  constructor(p0:any,p1:any) {
    this._changed = false;
    this.context = new import0.DockMonitorComponent(p0,p1);
    this._expr_0 = import1.UNINITIALIZED;
    this._expr_1 = import1.UNINITIALIZED;
  }
  ngOnDetach(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    this.context.ngOnDestroy();
  }
  check_toggleCommand(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.toggleCommand = currValue;
      this._expr_0 = currValue;
    }
  }
  check_positionCommand(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.positionCommand = currValue;
      this._expr_1 = currValue;
    }
  }
  ngDoCheck(view:import2.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import2.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
var renderType_DockMonitorComponent_Host:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,([] as any[]),{});
class View_DockMonitorComponent_Host0 extends import2.AppView<any> {
  _el_0:any;
  compView_0:import2.AppView<import0.DockMonitorComponent>;
  _DockMonitorComponent_0_3:Wrapper_DockMonitorComponent;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_DockMonitorComponent_Host0,renderType_DockMonitorComponent_Host,import6.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'dock-monitor',import3.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this.compView_0 = new View_DockMonitorComponent0(this.viewUtils,this,0,this._el_0);
    this._DockMonitorComponent_0_3 = new Wrapper_DockMonitorComponent(this.injectorGet(import9.StoreDevtools,this.parentIndex),this.injectorGet(import10.DockActions,this.parentIndex));
    this.compView_0.create(this._DockMonitorComponent_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import8.ComponentRef_<any>(0,this,this._el_0,this._DockMonitorComponent_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.DockMonitorComponent) && (0 === requestNodeIndex))) { return this._DockMonitorComponent_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    if (this._DockMonitorComponent_0_3.ngDoCheck(this,this._el_0,throwOnChange)) { this.compView_0.markAsCheckOnce(); }
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
    this._DockMonitorComponent_0_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  visitProjectableNodesInternal(nodeIndex:number,ngContentIndex:number,cb:any,ctx:any):void {
    if (((nodeIndex == 0) && (ngContentIndex == 0))) {  }
  }
}
export const DockMonitorComponentNgFactory:import8.ComponentFactory<import0.DockMonitorComponent> = new import8.ComponentFactory<import0.DockMonitorComponent>('dock-monitor',View_DockMonitorComponent_Host0,import0.DockMonitorComponent);
const styles_DockMonitorComponent:any[] = ([] as any[]);
var renderType_DockMonitorComponent:import4.RenderComponentType = import3.createRenderComponentType('',1,import5.ViewEncapsulation.None,styles_DockMonitorComponent,{});
export class View_DockMonitorComponent0 extends import2.AppView<import0.DockMonitorComponent> {
  _text_0:any;
  _el_1:any;
  compView_1:import2.AppView<import11.CommanderComponent>;
  _CommanderComponent_1_3:import12.Wrapper_CommanderComponent;
  _text_2:any;
  _el_3:any;
  compView_3:import2.AppView<import11.CommanderComponent>;
  _CommanderComponent_3_3:import12.Wrapper_CommanderComponent;
  _text_4:any;
  _el_5:any;
  compView_5:import2.AppView<import13.DockComponent>;
  _DockComponent_5_3:import14.Wrapper_DockComponent;
  _text_6:any;
  _text_7:any;
  _text_8:any;
  _pipe_async_0:import15.AsyncPipe;
  _pipe_async_1:import15.AsyncPipe;
  _pipe_async_2:import15.AsyncPipe;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_DockMonitorComponent0,renderType_DockMonitorComponent,import6.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckOnce);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._text_0 = this.renderer.createText(parentRenderNode,'\n    ',(null as any));
    this._el_1 = import3.createRenderElement(this.renderer,parentRenderNode,'ngrx-commander',import3.EMPTY_INLINE_ARRAY,(null as any));
    this.compView_1 = new import12.View_CommanderComponent0(this.viewUtils,this,1,this._el_1);
    this._CommanderComponent_1_3 = new import12.Wrapper_CommanderComponent();
    this.compView_1.create(this._CommanderComponent_1_3.context);
    this._text_2 = this.renderer.createText(parentRenderNode,'\n    ',(null as any));
    this._el_3 = import3.createRenderElement(this.renderer,parentRenderNode,'ngrx-commander',import3.EMPTY_INLINE_ARRAY,(null as any));
    this.compView_3 = new import12.View_CommanderComponent0(this.viewUtils,this,3,this._el_3);
    this._CommanderComponent_3_3 = new import12.Wrapper_CommanderComponent();
    this.compView_3.create(this._CommanderComponent_3_3.context);
    this._text_4 = this.renderer.createText(parentRenderNode,'\n\n    ',(null as any));
    this._el_5 = import3.createRenderElement(this.renderer,parentRenderNode,'ngrx-dock',import3.EMPTY_INLINE_ARRAY,(null as any));
    this.compView_5 = new import14.View_DockComponent0(this.viewUtils,this,5,this._el_5);
    this._DockComponent_5_3 = new import14.Wrapper_DockComponent();
    this._text_6 = this.renderer.createText((null as any),'\n      ',(null as any));
    this._text_7 = this.renderer.createText((null as any),'\n    ',(null as any));
    this.compView_5.create(this._DockComponent_5_3.context);
    this._text_8 = this.renderer.createText(parentRenderNode,'\n  ',(null as any));
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_1,new import3.InlineArray4(4,'command',(null as any),'keydown','document'),this.eventHandler(this.handleEvent_1));
    this._CommanderComponent_1_3.subscribe(this,this.eventHandler(this.handleEvent_1),true);
    var disposable_1:Function = import3.subscribeToRenderElement(this,this._el_3,new import3.InlineArray4(4,'command',(null as any),'keydown','document'),this.eventHandler(this.handleEvent_3));
    this._CommanderComponent_3_3.subscribe(this,this.eventHandler(this.handleEvent_3),true);
    this._pipe_async_0 = new import15.AsyncPipe(this.ref);
    this._pipe_async_1 = new import15.AsyncPipe(this.ref);
    this._pipe_async_2 = new import15.AsyncPipe(this.ref);
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._text_0,
      this._el_1,
      this._text_2,
      this._el_3,
      this._text_4,
      this._el_5,
      this._text_6,
      this._text_7,
      this._text_8
    ]
    ),[
      disposable_0,
      disposable_1
    ]
    );
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import11.CommanderComponent) && (1 === requestNodeIndex))) { return this._CommanderComponent_1_3.context; }
    if (((token === import11.CommanderComponent) && (3 === requestNodeIndex))) { return this._CommanderComponent_3_3.context; }
    if (((token === import13.DockComponent) && ((5 <= requestNodeIndex) && (requestNodeIndex <= 7)))) { return this._DockComponent_5_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const valUnwrapper:any = new import1.ValueUnwrapper();
    const currVal_1_0_0:any = this.context.toggleCommand;
    this._CommanderComponent_1_3.check_shortcut(currVal_1_0_0,throwOnChange,false);
    this._CommanderComponent_1_3.ngDoCheck(this,this._el_1,throwOnChange);
    const currVal_3_0_0:any = this.context.positionCommand;
    this._CommanderComponent_3_3.check_shortcut(currVal_3_0_0,throwOnChange,false);
    this._CommanderComponent_3_3.ngDoCheck(this,this._el_3,throwOnChange);
    valUnwrapper.reset();
    const currVal_5_0_0:any = valUnwrapper.unwrap(this._pipe_async_0.transform(this.context.position$));
    this._DockComponent_5_3.check_position(currVal_5_0_0,throwOnChange,valUnwrapper.hasWrappedValue);
    valUnwrapper.reset();
    const currVal_5_0_1:any = valUnwrapper.unwrap(this._pipe_async_1.transform(this.context.size$));
    this._DockComponent_5_3.check_size(currVal_5_0_1,throwOnChange,valUnwrapper.hasWrappedValue);
    valUnwrapper.reset();
    const currVal_5_0_2:any = valUnwrapper.unwrap(this._pipe_async_2.transform(this.context.visible$));
    this._DockComponent_5_3.check_visible(currVal_5_0_2,throwOnChange,valUnwrapper.hasWrappedValue);
    this._DockComponent_5_3.ngDoCheck(this,this._el_5,throwOnChange);
    this._DockComponent_5_3.checkHost(this,this.compView_5,this._el_5,throwOnChange);
    this.compView_1.internalDetectChanges(throwOnChange);
    this.compView_3.internalDetectChanges(throwOnChange);
    this.compView_5.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_1.destroy();
    this.compView_3.destroy();
    this.compView_5.destroy();
    this._CommanderComponent_1_3.ngOnDestroy();
    this._CommanderComponent_3_3.ngOnDestroy();
    this._pipe_async_0.ngOnDestroy();
    this._pipe_async_1.ngOnDestroy();
    this._pipe_async_2.ngOnDestroy();
  }
  visitProjectableNodesInternal(nodeIndex:number,ngContentIndex:number,cb:any,ctx:any):void {
    if (((nodeIndex == 5) && (ngContentIndex == 0))) {
      cb(this._text_6,ctx);
      this.visitProjectedNodes(0,cb,ctx);
      cb(this._text_7,ctx);
    }
  }
  handleEvent_1(eventName:string,$event:any):boolean {
    this.compView_1.markPathToRootAsCheckOnce();
    var result:boolean = true;
    result = (this._CommanderComponent_1_3.handleEvent(eventName,$event) && result);
    if ((eventName == 'command')) {
      const pd_sub_0:any = ((<any>this.context.toggle$.emit($event)) !== false);
      result = (pd_sub_0 && result);
    }
    return result;
  }
  handleEvent_3(eventName:string,$event:any):boolean {
    this.compView_3.markPathToRootAsCheckOnce();
    var result:boolean = true;
    result = (this._CommanderComponent_3_3.handleEvent(eventName,$event) && result);
    if ((eventName == 'command')) {
      const pd_sub_0:any = ((<any>this.context.changePosition$.emit($event)) !== false);
      result = (pd_sub_0 && result);
    }
    return result;
  }
}