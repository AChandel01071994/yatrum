/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from 'primeng/components/inputtext/inputtext';
import * as import2 from '@angular/common/src/common_module';
import * as import3 from '@angular/common/src/localization';
import * as import5 from '@angular/core/src/i18n/tokens';
import * as import6 from '@angular/core/src/change_detection/change_detection_util';
import * as import8 from '@angular/core/src/linker/view_utils';
var InputTextModuleInjector = (function (_super) {
    __extends(InputTextModuleInjector, _super);
    function InputTextModuleInjector(parent) {
        _super.call(this, parent, [], []);
    }
    Object.defineProperty(InputTextModuleInjector.prototype, "_NgLocalization_2", {
        get: function () {
            if ((this.__NgLocalization_2 == null)) {
                (this.__NgLocalization_2 = new import3.NgLocaleLocalization(this.parent.get(import5.LOCALE_ID)));
            }
            return this.__NgLocalization_2;
        },
        enumerable: true,
        configurable: true
    });
    InputTextModuleInjector.prototype.createInternal = function () {
        this._CommonModule_0 = new import2.CommonModule();
        this._InputTextModule_1 = new import1.InputTextModule();
        return this._InputTextModule_1;
    };
    InputTextModuleInjector.prototype.getInternal = function (token, notFoundResult) {
        if ((token === import2.CommonModule)) {
            return this._CommonModule_0;
        }
        if ((token === import1.InputTextModule)) {
            return this._InputTextModule_1;
        }
        if ((token === import3.NgLocalization)) {
            return this._NgLocalization_2;
        }
        return notFoundResult;
    };
    InputTextModuleInjector.prototype.destroyInternal = function () {
    };
    return InputTextModuleInjector;
}(import0.NgModuleInjector));
export var InputTextModuleNgFactory = new import0.NgModuleFactory(InputTextModuleInjector, import1.InputTextModule);
export var Wrapper_InputText = (function () {
    function Wrapper_InputText(p0) {
        this._changed = false;
        this.context = new import1.InputText(p0);
        this._expr_0 = import6.UNINITIALIZED;
        this._expr_1 = import6.UNINITIALIZED;
        this._expr_2 = import6.UNINITIALIZED;
        this._expr_3 = import6.UNINITIALIZED;
        this._expr_4 = import6.UNINITIALIZED;
        this._expr_5 = import6.UNINITIALIZED;
        this._expr_6 = import6.UNINITIALIZED;
        this._expr_7 = import6.UNINITIALIZED;
    }
    Wrapper_InputText.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_InputText.prototype.ngOnDestroy = function () {
    };
    Wrapper_InputText.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_InputText.prototype.checkHost = function (view, componentView, el, throwOnChange) {
        var currVal_0 = true;
        if (import8.checkBinding(throwOnChange, this._expr_0, currVal_0)) {
            view.renderer.setElementClass(el, 'ui-inputtext', currVal_0);
            this._expr_0 = currVal_0;
        }
        var currVal_1 = true;
        if (import8.checkBinding(throwOnChange, this._expr_1, currVal_1)) {
            view.renderer.setElementClass(el, 'ui-corner-all', currVal_1);
            this._expr_1 = currVal_1;
        }
        var currVal_2 = true;
        if (import8.checkBinding(throwOnChange, this._expr_2, currVal_2)) {
            view.renderer.setElementClass(el, 'ui-state-default', currVal_2);
            this._expr_2 = currVal_2;
        }
        var currVal_3 = true;
        if (import8.checkBinding(throwOnChange, this._expr_3, currVal_3)) {
            view.renderer.setElementClass(el, 'ui-widget', currVal_3);
            this._expr_3 = currVal_3;
        }
        var currVal_4 = this.context.hover;
        if (import8.checkBinding(throwOnChange, this._expr_4, currVal_4)) {
            view.renderer.setElementClass(el, 'ui-state-hover', currVal_4);
            this._expr_4 = currVal_4;
        }
        var currVal_5 = this.context.focus;
        if (import8.checkBinding(throwOnChange, this._expr_5, currVal_5)) {
            view.renderer.setElementClass(el, 'ui-state-focus', currVal_5);
            this._expr_5 = currVal_5;
        }
        var currVal_6 = this.context.disabled;
        if (import8.checkBinding(throwOnChange, this._expr_6, currVal_6)) {
            view.renderer.setElementClass(el, 'ui-state-disabled', currVal_6);
            this._expr_6 = currVal_6;
        }
        var currVal_7 = this.context.filled;
        if (import8.checkBinding(throwOnChange, this._expr_7, currVal_7)) {
            view.renderer.setElementClass(el, 'ui-state-filled', currVal_7);
            this._expr_7 = currVal_7;
        }
    };
    Wrapper_InputText.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        if ((eventName == 'mouseover')) {
            var pd_sub_0 = (this.context.onMouseover($event) !== false);
            result = (pd_sub_0 && result);
        }
        if ((eventName == 'mouseout')) {
            var pd_sub_1 = (this.context.onMouseout($event) !== false);
            result = (pd_sub_1 && result);
        }
        if ((eventName == 'focus')) {
            var pd_sub_2 = (this.context.onFocus($event) !== false);
            result = (pd_sub_2 && result);
        }
        if ((eventName == 'blur')) {
            var pd_sub_3 = (this.context.onBlur($event) !== false);
            result = (pd_sub_3 && result);
        }
        return result;
    };
    Wrapper_InputText.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_InputText;
}());
//# sourceMappingURL=inputtext.ngfactory.js.map