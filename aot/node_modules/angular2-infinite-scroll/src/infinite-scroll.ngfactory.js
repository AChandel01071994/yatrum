/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
import * as import0 from 'angular2-infinite-scroll/src/infinite-scroll';
import * as import1 from '@angular/core/src/change_detection/change_detection_util';
import * as import3 from '@angular/core/src/linker/view_utils';
export var Wrapper_InfiniteScroll = (function () {
    function Wrapper_InfiniteScroll(p0, p1, p2) {
        this._changed = false;
        this._changes = {};
        this.context = new import0.InfiniteScroll(p0, p1, p2);
        this._expr_0 = import1.UNINITIALIZED;
        this._expr_1 = import1.UNINITIALIZED;
        this._expr_2 = import1.UNINITIALIZED;
        this._expr_3 = import1.UNINITIALIZED;
        this._expr_4 = import1.UNINITIALIZED;
        this._expr_5 = import1.UNINITIALIZED;
        this._expr_6 = import1.UNINITIALIZED;
        this._expr_7 = import1.UNINITIALIZED;
        this._expr_8 = import1.UNINITIALIZED;
    }
    Wrapper_InfiniteScroll.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_InfiniteScroll.prototype.ngOnDestroy = function () {
        this.context.ngOnDestroy();
        (this.subscription0 && this.subscription0.unsubscribe());
        (this.subscription1 && this.subscription1.unsubscribe());
    };
    Wrapper_InfiniteScroll.prototype.check__distanceDown = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context._distanceDown = currValue;
            this._changes['_distanceDown'] = new import1.SimpleChange(this._expr_0, currValue);
            this._expr_0 = currValue;
        }
    };
    Wrapper_InfiniteScroll.prototype.check__distanceUp = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_1, currValue))) {
            this._changed = true;
            this.context._distanceUp = currValue;
            this._changes['_distanceUp'] = new import1.SimpleChange(this._expr_1, currValue);
            this._expr_1 = currValue;
        }
    };
    Wrapper_InfiniteScroll.prototype.check__throttle = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_2, currValue))) {
            this._changed = true;
            this.context._throttle = currValue;
            this._changes['_throttle'] = new import1.SimpleChange(this._expr_2, currValue);
            this._expr_2 = currValue;
        }
    };
    Wrapper_InfiniteScroll.prototype.check__disabled = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_3, currValue))) {
            this._changed = true;
            this.context._disabled = currValue;
            this._changes['_disabled'] = new import1.SimpleChange(this._expr_3, currValue);
            this._expr_3 = currValue;
        }
    };
    Wrapper_InfiniteScroll.prototype.check_scrollWindow = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_4, currValue))) {
            this._changed = true;
            this.context.scrollWindow = currValue;
            this._changes['scrollWindow'] = new import1.SimpleChange(this._expr_4, currValue);
            this._expr_4 = currValue;
        }
    };
    Wrapper_InfiniteScroll.prototype.check__immediate = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_5, currValue))) {
            this._changed = true;
            this.context._immediate = currValue;
            this._changes['_immediate'] = new import1.SimpleChange(this._expr_5, currValue);
            this._expr_5 = currValue;
        }
    };
    Wrapper_InfiniteScroll.prototype.check__horizontal = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_6, currValue))) {
            this._changed = true;
            this.context._horizontal = currValue;
            this._changes['_horizontal'] = new import1.SimpleChange(this._expr_6, currValue);
            this._expr_6 = currValue;
        }
    };
    Wrapper_InfiniteScroll.prototype.check__alwaysCallback = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_7, currValue))) {
            this._changed = true;
            this.context._alwaysCallback = currValue;
            this._changes['_alwaysCallback'] = new import1.SimpleChange(this._expr_7, currValue);
            this._expr_7 = currValue;
        }
    };
    Wrapper_InfiniteScroll.prototype.check_debounce = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_8, currValue))) {
            this._changed = true;
            this.context.debounce = currValue;
            this._changes['debounce'] = new import1.SimpleChange(this._expr_8, currValue);
            this._expr_8 = currValue;
        }
    };
    Wrapper_InfiniteScroll.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        if (!throwOnChange) {
            if (changed) {
                this.context.ngOnChanges(this._changes);
                this._changes = {};
            }
            if ((view.numberOfChecks === 0)) {
                this.context.ngOnInit();
            }
        }
        return changed;
    };
    Wrapper_InfiniteScroll.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_InfiniteScroll.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_InfiniteScroll.prototype.subscribe = function (view, _eventHandler, emit0, emit1) {
        this._eventHandler = _eventHandler;
        if (emit0) {
            (this.subscription0 = this.context.scrolled.subscribe(_eventHandler.bind(view, 'scrolled')));
        }
        if (emit1) {
            (this.subscription1 = this.context.scrolledUp.subscribe(_eventHandler.bind(view, 'scrolledUp')));
        }
    };
    return Wrapper_InfiniteScroll;
}());
//# sourceMappingURL=infinite-scroll.ngfactory.js.map