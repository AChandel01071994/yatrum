/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '../../../../../../src/app/components/dashboard/feed-trips/feed-trips.component';
import * as import1 from '@angular/core/src/linker/view';
import * as import2 from '@angular/core/src/render/api';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/metadata/view';
import * as import5 from '@angular/core/src/linker/view_type';
import * as import6 from '@angular/core/src/change_detection/constants';
import * as import7 from '@angular/core/src/linker/component_factory';
import * as import8 from '@ngrx/store/src/store';
import * as import9 from '../../../../../../src/app/services/trips.service';
import * as import10 from './feed-trips.component.scss.shim.ngstyle';
import * as import11 from '@angular/core/src/animation/animation_transition';
import * as import12 from '@angular/core/src/animation/animation_sequence_player';
import * as import13 from '@angular/core/src/animation/animation_styles';
import * as import14 from '@angular/core/src/animation/animation_style_util';
import * as import15 from '@angular/core/src/animation/animation_keyframe';
import * as import16 from '@angular/core/src/animation/animation_player';
import * as import17 from '../../../../../../src/app/components/shared/trips/trip-list-item/trip-list-item.component';
import * as import18 from '../../shared/trips/trip-list-item/trip-list-item.component.ngfactory';
import * as import19 from '@angular/core/src/linker/view_container';
import * as import20 from '@angular/core/src/change_detection/change_detection_util';
import * as import21 from '@angular/router/src/router';
import * as import22 from '../../../../../../src/app/services/user-auth.service';
import * as import23 from '../../../../../node_modules/angular2-infinite-scroll/src/infinite-scroll.ngfactory';
import * as import24 from '../../../../../node_modules/@angular/common/src/directives/ng_for.ngfactory';
import * as import25 from '@angular/common/src/pipes/async_pipe';
import * as import26 from '@angular/core/src/linker/element_ref';
import * as import27 from '@angular/core/src/zone/ng_zone';
import * as import28 from 'angular2-infinite-scroll/src/position-resolver';
import * as import29 from '@angular/core/src/linker/template_ref';
import * as import30 from '@angular/core/src/change_detection/differs/iterable_differs';
import * as import31 from '@angular/common/src/directives/ng_for';
import * as import32 from 'angular2-infinite-scroll/src/infinite-scroll';
export class Wrapper_FeedTripsComponent {
  /*private*/ _eventHandler:Function;
  context:import0.FeedTripsComponent;
  /*private*/ _changed:boolean;
  constructor(p0:any,p1:any) {
    this._changed = false;
    this.context = new import0.FeedTripsComponent(p0,p1);
  }
  ngOnDetach(view:import1.AppView<any>,componentView:import1.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    this.context.ngOnDestroy();
  }
  ngDoCheck(view:import1.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    if (!throwOnChange) { if ((view.numberOfChecks === 0)) { this.context.ngOnInit(); } }
    return changed;
  }
  checkHost(view:import1.AppView<any>,componentView:import1.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import1.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
var renderType_FeedTripsComponent_Host:import2.RenderComponentType = import3.createRenderComponentType('',0,import4.ViewEncapsulation.None,([] as any[]),{});
class View_FeedTripsComponent_Host0 extends import1.AppView<any> {
  _el_0:any;
  compView_0:import1.AppView<import0.FeedTripsComponent>;
  _FeedTripsComponent_0_3:Wrapper_FeedTripsComponent;
  constructor(viewUtils:import3.ViewUtils,parentView:import1.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_FeedTripsComponent_Host0,renderType_FeedTripsComponent_Host,import5.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import6.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import7.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'tr-feed-trips',import3.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this.compView_0 = new View_FeedTripsComponent0(this.viewUtils,this,0,this._el_0);
    this._FeedTripsComponent_0_3 = new Wrapper_FeedTripsComponent(this.injectorGet(import8.Store,this.parentIndex),this.injectorGet(import9.TripsService,this.parentIndex));
    this.compView_0.create(this._FeedTripsComponent_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import7.ComponentRef_<any>(0,this,this._el_0,this._FeedTripsComponent_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.FeedTripsComponent) && (0 === requestNodeIndex))) { return this._FeedTripsComponent_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._FeedTripsComponent_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
    this._FeedTripsComponent_0_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
export const FeedTripsComponentNgFactory:import7.ComponentFactory<import0.FeedTripsComponent> = new import7.ComponentFactory<import0.FeedTripsComponent>('tr-feed-trips',View_FeedTripsComponent_Host0,import0.FeedTripsComponent);
const styles_FeedTripsComponent:any[] = [import10.styles];
var FeedTripsComponent_fadeIn_states:any = {
  'in': {'opacity': '1'},
  '*': {},
  'void': {}
}
;
function FeedTripsComponent_fadeIn_factory(view:import1.AppView<any>,element:any,currentState:any,nextState:any):import11.AnimationTransition {
  var previousPlayers:any = view.animationContext.getAnimationPlayers(element,((nextState == 'void')? (null as any): 'fadeIn'));
  var collectedStyles:any = {};
  var player:any = (null as any);
  var totalTime:any = 0;
  var defaultStateStyles:any = FeedTripsComponent_fadeIn_states['*'];
  var startStateStyles:any = FeedTripsComponent_fadeIn_states[currentState];
  if ((startStateStyles == (null as any))) { (startStateStyles = defaultStateStyles); }
  var endStateStyles:any = FeedTripsComponent_fadeIn_states[nextState];
  if ((endStateStyles == (null as any))) { (endStateStyles = defaultStateStyles); }
  if (((player == (null as any)) && ((currentState == 'void') && true))) {
      player = new import12.AnimationSequencePlayer([view.renderer.animate(element,new import13.AnimationStyles(import14.collectAndResolveStyles(collectedStyles,[
        startStateStyles,
        {'opacity': '0'}
      ]
      )),import14.balanceAnimationKeyframes(collectedStyles,endStateStyles,[
        new import15.AnimationKeyframe(0,new import13.AnimationStyles(import14.collectAndResolveStyles(collectedStyles,[{}]))),
        new import15.AnimationKeyframe(1,new import13.AnimationStyles(import14.collectAndResolveStyles(collectedStyles,[{}])))
      ]
    ),500,0,(null as any),previousPlayers)]);
    totalTime = 500;
  }
  if ((player == (null as any))) { (player = new import16.NoOpAnimationPlayer()); }
  player.onDone(():void => {
    player.destroy();
    import14.renderStyles(element,view.renderer,import14.prepareFinalAnimationStyles(startStateStyles,endStateStyles));
  });
  new import12.AnimationSequencePlayer(previousPlayers).destroy();
  import14.renderStyles(element,view.renderer,import14.clearStyles(startStateStyles));
  view.animationContext.queueAnimation(element,'fadeIn',player);
  return new import11.AnimationTransition(player,currentState,nextState,totalTime);
}
class View_FeedTripsComponent1 extends import1.AppView<any> {
  _el_0:any;
  _text_1:any;
  _el_2:any;
  compView_2:import1.AppView<import17.TripListItemComponent>;
  _TripListItemComponent_2_3:import18.Wrapper_TripListItemComponent;
  _text_3:any;
  /*private*/ _expr_6:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import1.AppView<any>,parentIndex:number,parentElement:any,declaredViewContainer:import19.ViewContainer) {
    super(View_FeedTripsComponent1,renderType_FeedTripsComponent,import5.ViewType.EMBEDDED,viewUtils,parentView,parentIndex,parentElement,import6.ChangeDetectorStatus.CheckAlways,declaredViewContainer);
    this._expr_6 = import20.UNINITIALIZED;
  }
  createInternal(rootSelector:string):import7.ComponentRef<any> {
    this._el_0 = import3.createRenderElement(this.renderer,(null as any),'div',new import3.InlineArray2(2,'class','column'),(null as any));
    this._text_1 = this.renderer.createText(this._el_0,'\n        ',(null as any));
    this._el_2 = import3.createRenderElement(this.renderer,this._el_0,'tr-trip-list-item',import3.EMPTY_INLINE_ARRAY,(null as any));
    this.compView_2 = new import18.View_TripListItemComponent0(this.viewUtils,this,2,this._el_2);
    this._TripListItemComponent_2_3 = new import18.Wrapper_TripListItemComponent(this.parentView.parentView.injectorGet(import21.Router,this.parentView.parentIndex),this.parentView.parentView.injectorGet(import8.Store,this.parentView.parentIndex),this.parentView.parentView.injectorGet(import22.UserAuthService,this.parentView.parentIndex));
    this.compView_2.create(this._TripListItemComponent_2_3.context);
    this._text_3 = this.renderer.createText(this._el_0,'\n      ',(null as any));
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._text_1,
      this._el_2,
      this._text_3
    ]
    ),(null as any));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import17.TripListItemComponent) && (2 === requestNodeIndex))) { return this._TripListItemComponent_2_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_6:any = 'in';
    if (import3.checkBinding(throwOnChange,this._expr_6,currVal_6)) {
      var animationTransition_fadeIn:any = this.componentType.animations['fadeIn'](this,this._el_0,((this._expr_6 == import20.UNINITIALIZED)? 'void': this._expr_6),((currVal_6 == import20.UNINITIALIZED)? 'void': currVal_6));
      this._expr_6 = currVal_6;
    }
    const currVal_2_0_0:any = this.context.$implicit;
    this._TripListItemComponent_2_3.check_trip(currVal_2_0_0,throwOnChange,false);
    this._TripListItemComponent_2_3.ngDoCheck(this,this._el_2,throwOnChange);
    this.compView_2.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_2.destroy();
  }
  detachInternal():void {
    var animationTransition_fadeIn:any = this.componentType.animations['fadeIn'](this,this._el_0,this._expr_6,'void');
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
var renderType_FeedTripsComponent:import2.RenderComponentType = import3.createRenderComponentType('',0,import4.ViewEncapsulation.Emulated,styles_FeedTripsComponent,{fadeIn: FeedTripsComponent_fadeIn_factory});
export class View_FeedTripsComponent0 extends import1.AppView<import0.FeedTripsComponent> {
  _el_0:any;
  _InfiniteScroll_0_3:import23.Wrapper_InfiniteScroll;
  _text_1:any;
  _el_2:any;
  _text_3:any;
  _text_4:any;
  _el_5:any;
  _text_6:any;
  _anchor_7:any;
  /*private*/ _vc_7:import19.ViewContainer;
  _TemplateRef_7_5:any;
  _NgFor_7_6:import24.Wrapper_NgFor;
  _text_8:any;
  _text_9:any;
  _text_10:any;
  _pipe_async_0:import25.AsyncPipe;
  constructor(viewUtils:import3.ViewUtils,parentView:import1.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_FeedTripsComponent0,renderType_FeedTripsComponent,import5.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import6.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import7.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._el_0 = import3.createRenderElement(this.renderer,parentRenderNode,'div',new import3.InlineArray4(4,'class','ui centered grid','infinite-scroll',''),(null as any));
    this._InfiniteScroll_0_3 = new import23.Wrapper_InfiniteScroll(new import26.ElementRef(this._el_0),this.parentView.injectorGet(import27.NgZone,this.parentIndex),this.parentView.injectorGet(import28.PositionResolverFactory,this.parentIndex));
    this._text_1 = this.renderer.createText(this._el_0,'\n  ',(null as any));
    this._el_2 = import3.createRenderElement(this.renderer,this._el_0,'div',new import3.InlineArray2(2,'class','fourteen wide column'),(null as any));
    this._text_3 = this.renderer.createText(this._el_2,'\n    ',(null as any));
    this._text_4 = this.renderer.createText(this._el_2,'\n    ',(null as any));
    this._el_5 = import3.createRenderElement(this.renderer,this._el_2,'div',new import3.InlineArray2(2,'class','ui stackable two column grid'),(null as any));
    this._text_6 = this.renderer.createText(this._el_5,'\n      ',(null as any));
    this._anchor_7 = this.renderer.createTemplateAnchor(this._el_5,(null as any));
    this._vc_7 = new import19.ViewContainer(7,5,this,this._anchor_7);
    this._TemplateRef_7_5 = new import29.TemplateRef_(this,7,this._anchor_7);
    this._NgFor_7_6 = new import24.Wrapper_NgFor(this._vc_7.vcRef,this._TemplateRef_7_5,this.parentView.injectorGet(import30.IterableDiffers,this.parentIndex),this.ref);
    this._text_8 = this.renderer.createText(this._el_5,'\n    ',(null as any));
    this._text_9 = this.renderer.createText(this._el_2,'\n  ',(null as any));
    this._text_10 = this.renderer.createText(this._el_0,'\n',(null as any));
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_0,new import3.InlineArray2(2,'scrolled',(null as any)),this.eventHandler(this.handleEvent_0));
    this._InfiniteScroll_0_3.subscribe(this,this.eventHandler(this.handleEvent_0),true,false);
    this._pipe_async_0 = new import25.AsyncPipe(this.ref);
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._text_1,
      this._el_2,
      this._text_3,
      this._text_4,
      this._el_5,
      this._text_6,
      this._anchor_7,
      this._text_8,
      this._text_9,
      this._text_10
    ]
    ),[disposable_0]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import29.TemplateRef) && (7 === requestNodeIndex))) { return this._TemplateRef_7_5; }
    if (((token === import31.NgFor) && (7 === requestNodeIndex))) { return this._NgFor_7_6.context; }
    if (((token === import32.InfiniteScroll) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 10)))) { return this._InfiniteScroll_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const valUnwrapper:any = new import20.ValueUnwrapper();
    const currVal_0_0_0:any = 0.1;
    this._InfiniteScroll_0_3.check__distanceDown(currVal_0_0_0,throwOnChange,false);
    const currVal_0_0_1:any = 500;
    this._InfiniteScroll_0_3.check__throttle(currVal_0_0_1,throwOnChange,false);
    this._InfiniteScroll_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    valUnwrapper.reset();
    const currVal_7_0_0:any = valUnwrapper.unwrap(this._pipe_async_0.transform(this.context.feedTrips$));
    this._NgFor_7_6.check_ngForOf(currVal_7_0_0,throwOnChange,valUnwrapper.hasWrappedValue);
    this._NgFor_7_6.ngDoCheck(this,this._anchor_7,throwOnChange);
    this._vc_7.detectChangesInNestedViews(throwOnChange);
  }
  destroyInternal():void {
    this._vc_7.destroyNestedViews();
    this._InfiniteScroll_0_3.ngOnDestroy();
    this._pipe_async_0.ngOnDestroy();
  }
  createEmbeddedViewInternal(nodeIndex:number):import1.AppView<any> {
    if ((nodeIndex == 7)) { return new View_FeedTripsComponent1(this.viewUtils,this,7,this._anchor_7,this._vc_7); }
    return (null as any);
  }
  handleEvent_0(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'scrolled')) {
      const pd_sub_0:any = ((<any>this.context.onScroll()) !== false);
      result = (pd_sub_0 && result);
    }
    return result;
  }
}